{"version":3,"sources":["../server/server.js"],"names":["app","SourceMapSupport","install","MONGODB_URI","process","env","COLLECTION","mongoDb","mongoConnection","use","express","static","bodyParser","json","err","req","res","next","console","log","send","set","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","get","JSON","stringify","query","filter","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","message","issueId","ObjectId","params","id","_id","limit","issue","put","body","Issue","validateIssue","update","convertIssue","savedIssue","post","newIssue","created","Date","insertOne","cleanupIssue","result","insertedId","delete","deleteOne","deleteResult","n","sendFile","path","resolve","port","PORT","MongoClient","connect","useNewUrlParser","connection","db","replace","listen"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,MAAM,wBAAZ;AACAC,2BAAiBC,OAAjB;;AAEA,MAAMC,cAAcC,QAAQC,GAAR,CAAYF,WAAZ,IAA2B,sCAA/C;AACA,MAAMG,aAAa,QAAnB;AACA,IAAIC,OAAJ;AACA,IAAIC,eAAJ;;AAEAR,IAAIS,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;;AAEAX,IAAIS,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;AACAb,IAAIS,GAAJ,CAAQ,CAACK,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;AAC/B,MAAIH,GAAJ,EAAS;AACPI,YAAQC,GAAR,CAAY,sBAAZ;AACAH,QAAII,IAAJ,CAAS,sBAAT;AACD,GAHD,MAGO;AACLH;AACD;AACF,CAPD;AAQAjB,IAAIS,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR,E,CAAmC;AACnCX,IAAIqB,GAAJ,CAAQ,aAAR,EAAuB,CAAvB;AACAH,QAAQC,GAAR,CAAa,eAAcf,QAAQC,GAAR,CAAYiB,QAAS,EAAhD;;AAEA;AACA,IAAIlB,QAAQC,GAAR,CAAYiB,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAMC,UAAUC,QAAQ,SAAR,CAAhB;AACA,QAAMC,uBAAuBD,QAAQ,wBAAR,CAA7B;AACA,QAAME,uBAAuBF,QAAQ,wBAAR,CAA7B;AACA,QAAMG,SAASH,QAAQ,mBAAR,CAAf;AACAG,SAAOC,KAAP,CAAa5B,GAAb,CAAiB6B,IAAjB,CAAsB,+BAAtB,EAAuD,6BAAvD;AACAF,SAAOG,OAAP,CAAeD,IAAf,CAAoB,IAAIN,QAAQQ,0BAAZ,EAApB;AACA,QAAMC,UAAUT,QAAQI,MAAR,CAAhB;AACA3B,MAAIS,GAAJ,CAAQgB,qBAAqBO,OAArB,EAA8B,EAAEC,QAAQ,IAAV,EAA9B,CAAR;AACAjC,MAAIS,GAAJ,CAAQiB,qBAAqBM,OAArB,EAA8B,EAAEb,KAAKD,QAAQC,GAAf,EAA9B,CAAR;AACD;AACD;;AAEAnB,IAAIkC,GAAJ,CAAQ,aAAR,EAAuB,CAACnB,GAAD,EAAMC,GAAN,KAAc;AACnCE,UAAQC,GAAR,CAAYgB,KAAKC,SAAL,CAAerB,IAAIsB,KAAnB,EAA0B,IAA1B,EAAgC,CAAhC,CAAZ;AACA,QAAMC,SAAS,EAAf;AACA,MAAIvB,IAAIsB,KAAJ,CAAUE,MAAd,EAAsBD,OAAOC,MAAP,GAAgBxB,IAAIsB,KAAJ,CAAUE,MAA1B;AACtB,MAAIxB,IAAIsB,KAAJ,CAAUG,UAAV,IAAwBzB,IAAIsB,KAAJ,CAAUI,UAAtC,EAAkDH,OAAOI,MAAP,GAAgB,EAAhB;AAClD,MAAI3B,IAAIsB,KAAJ,CAAUG,UAAd,EAA0BF,OAAOI,MAAP,CAAcC,IAAd,GAAqBC,SAAS7B,IAAIsB,KAAJ,CAAUG,UAAnB,EAA+B,EAA/B,CAArB;AAC1B,MAAIzB,IAAIsB,KAAJ,CAAUI,UAAd,EAA0BH,OAAOI,MAAP,CAAcG,IAAd,GAAqBD,SAAS7B,IAAIsB,KAAJ,CAAUI,UAAnB,EAA+B,EAA/B,CAArB;AAC1BlC,UAAQuC,UAAR,CAAmBxC,UAAnB,EACGyC,IADH,CACQT,MADR,EAEGU,OAFH,GAGGC,IAHH,CAGSC,MAAD,IAAY;AAChB,UAAMC,WAAW;AACfC,mBAAaF,OAAOG;AADL,KAAjB;AAGAnC,YAAQC,GAAR,CAAY,4BAAZ;AACAH,QAAIH,IAAJ,CAAS;AACPyC,iBAAWH,QADJ;AAEPI,eAASL;AAFF,KAAT;AAID,GAZH,EAaGM,KAbH,CAaUC,KAAD,IAAW;AAChBvC,YAAQC,GAAR,CAAYsC,KAAZ;AACAzC,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,0BAAyBD,KAAM,EAA3C,EAArB;AACD,GAhBH;AAiBD,CAxBD;;AA0BAzD,IAAIkC,GAAJ,CAAQ,iBAAR,EAA2B,CAACnB,GAAD,EAAMC,GAAN,KAAc;AACvC,MAAI2C,OAAJ;AACA,MAAI;AACFA,cAAU,IAAIC,iBAAJ,CAAa7C,IAAI8C,MAAJ,CAAWC,EAAxB,CAAV;AACD,GAFD,CAEE,OAAOL,KAAP,EAAc;AACdzC,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,4BAA2BD,KAAM,EAA7C,EAArB;AACD;AACDlD,UAAQuC,UAAR,CAAmBxC,UAAnB,EACGyC,IADH,CACQ,EAAEgB,KAAKJ,OAAP,EADR,EAEGK,KAFH,CAES,CAFT,EAGG/C,IAHH,GAIGgC,IAJH,CAISgB,KAAD,IAAW;AACf,QAAI,CAACA,KAAL,EAAYjD,IAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,kBAAiBC,OAAQ,EAArC,EAArB,EAAZ,KACK3C,IAAIH,IAAJ,CAASoD,KAAT;AACN,GAPH,EAQGT,KARH,CAQUC,KAAD,IAAW;AAChBvC,YAAQC,GAAR,CAAYsC,KAAZ;AACAzC,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,0BAAyBD,KAAM,EAA3C,EAArB;AACD,GAXH;AAYD,CAnBD;;AAqBAzD,IAAIkE,GAAJ,CAAQ,iBAAR,EAA2B,CAACnD,GAAD,EAAMC,GAAN,KAAc;AACvC,MAAI2C,OAAJ;AACA,MAAI;AACFA,cAAU,IAAIC,iBAAJ,CAAa7C,IAAI8C,MAAJ,CAAWC,EAAxB,CAAV;AACD,GAFD,CAEE,OAAOL,KAAP,EAAc;AACdzC,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,4BAA2BD,KAAM,EAA7C,EAArB;AACA;AACD;;AAED,QAAMQ,QAAQlD,IAAIoD,IAAlB;AACA,SAAOF,MAAMF,GAAb;AACA,QAAMjD,MAAMsD,gBAAMC,aAAN,CAAoBJ,KAApB,CAAZ;AACA,MAAInD,GAAJ,EAAS;AACPE,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,mBAAkB5C,GAAI,EAAlC,EAArB;AACA;AACD;;AAEDP,UAAQuC,UAAR,CAAmBxC,UAAnB,EACGgE,MADH,CACU,EAAEP,KAAKJ,OAAP,EADV,EAC4BS,gBAAMG,YAAN,CAAmBN,KAAnB,CAD5B,EAEGhB,IAFH,CAEQ,MACJ1C,QAAQuC,UAAR,CAAmBxC,UAAnB,EACGyC,IADH,CACQ,EAAEgB,KAAKJ,OAAP,EADR,EAEGK,KAFH,CAES,CAFT,EAGG/C,IAHH,EAHJ,EAQGgC,IARH,CAQSuB,UAAD,IAAgB;AACpBxD,QAAIH,IAAJ,CAAS2D,UAAT;AACD,GAVH,EAWGhB,KAXH,CAWUC,KAAD,IAAW;AAChBvC,YAAQC,GAAR,CAAYsC,KAAZ;AACAzC,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,yBAAwBD,KAAM,EAA1C,EAArB;AACD,GAdH;AAeD,CAhCD;;AAkCAzD,IAAIyE,IAAJ,CAAS,aAAT,EAAwB,CAAC1D,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAM0D,WAAW3D,IAAIoD,IAArB;AACAO,WAASC,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACF,SAASnC,MAAd,EAAsB;AACpBmC,aAASnC,MAAT,GAAkB,KAAlB;AACD;AACD,QAAMzB,MAAMsD,gBAAMC,aAAN,CAAoBK,QAApB,CAAZ;AACA,MAAI5D,GAAJ,EAAS;AACPE,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,oBAAmB5C,GAAI,EAAnC,EAArB;AACA;AACD;AACDP,UAAQuC,UAAR,CAAmBxC,UAAnB,EACGuE,SADH,CACaT,gBAAMU,YAAN,CAAmBJ,QAAnB,CADb,EAEGzB,IAFH,CAEQ8B,UAAUxE,QAAQuC,UAAR,CAAmBxC,UAAnB,EACbyC,IADa,CACR,EAAEgB,KAAKgB,OAAOC,UAAd,EADQ,EAEbhB,KAFa,CAEP,CAFO,EAGb/C,IAHa,EAFlB,EAMGgC,IANH,CAMSgB,KAAD,IAAW;AACfjD,QAAIH,IAAJ,CAASoD,KAAT;AACD,GARH,EASGT,KATH,CASUC,KAAD,IAAW;AAChBvC,YAAQC,GAAR,CAAYsC,KAAZ;AACAzC,QAAIuB,MAAJ,CAAW,GAAX,EACG1B,IADH,CACQ,EAAE6C,SAAU,0BAAyBD,KAAM,EAA3C,EADR;AAED,GAbH;AAcD,CAzBD;;AA2BAzD,IAAIiF,MAAJ,CAAW,iBAAX,EAA8B,CAAClE,GAAD,EAAMC,GAAN,KAAc;AAC1C,MAAI2C,OAAJ;AACA,MAAI;AACFA,cAAU,IAAIC,iBAAJ,CAAa7C,IAAI8C,MAAJ,CAAWC,EAAxB,CAAV;AACD,GAFD,CAEE,OAAOL,KAAP,EAAc;AACdzC,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,4BAA2BD,KAAM,EAA7C,EAArB;AACA;AACD;;AAEDlD,UAAQuC,UAAR,CAAmBxC,UAAnB,EAA+B4E,SAA/B,CAAyC,EAAEnB,KAAKJ,OAAP,EAAzC,EAA2DV,IAA3D,CAAiEkC,YAAD,IAAkB;AAChF,QAAIA,aAAaJ,MAAb,CAAoBK,CAApB,KAA0B,CAA9B,EAAiCpE,IAAIH,IAAJ,CAAS,EAAE0B,QAAQ,IAAV,EAAT,EAAjC,KACKvB,IAAIH,IAAJ,CAAS,EAAE0B,QAAQ,4BAAV,EAAT;AACN,GAHD,EAGGiB,KAHH,CAGUC,KAAD,IAAW;AAClBvC,YAAQC,GAAR,CAAYsC,KAAZ;AACAzC,QAAIuB,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqB,EAAE6C,SAAU,0BAAyBD,KAAM,EAA3C,EAArB;AACD,GAND;AAOD,CAhBD;;AAkBAzD,IAAIkC,GAAJ,CAAQ,GAAR,EAAa,CAACnB,GAAD,EAAMC,GAAN,KAAc;AACzBA,MAAIqE,QAAJ,CAAaC,eAAKC,OAAL,CAAa,mBAAb,CAAb;AACD,CAFD;;AAIA,MAAMC,OAAOpF,QAAQC,GAAR,CAAYoF,IAAZ,IAAoB,IAAjC;;AAEAC,qBAAYC,OAAZ,CAAoBxF,WAApB,EAAiC,EAAEyF,iBAAiB,IAAnB,EAAjC,EACG3C,IADH,CACS4C,UAAD,IAAgB;AACpBrF,oBAAkBqF,UAAlB;AACAtF,YAAUC,gBAAgBsF,EAAhB,CAAmB3F,YAAY4F,OAAZ,CAAoB,MAApB,EAA4B,EAA5B,CAAnB,CAAV;AACA/F,MAAIgG,MAAJ,CAAWR,IAAX,EAAiB,MAAM;AACrBtE,YAAQC,GAAR,CAAY,sBAAZ,EAAoCqE,IAApC;AACD,GAFD;AAGD,CAPH,EAQGhC,KARH,CAQU1C,GAAD,IAAS;AACdI,UAAQC,GAAR,CAAY,8BAAZ,EAA4CL,GAA5C;AACD,CAVH","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\nimport 'babel-polyfill';\nimport express from 'express';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport bodyParser from 'body-parser';\nimport path from 'path';\nimport Issue from './issue';\n\nconst app = express();\nSourceMapSupport.install();\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/playground';\nconst COLLECTION = 'issues';\nlet mongoDb;\nlet mongoConnection;\n\napp.use(express.static('static'));\n\napp.use(bodyParser.json());\napp.use((err, req, res, next) => {\n  if (err) {\n    console.log('Invalid Request data');\n    res.send('Invalid Request data');\n  } else {\n    next();\n  }\n});\napp.use(express.static('static')); // serve the actual files\napp.set('json spaces', 4);\nconsole.log(`NODE_ENV is ${process.env.NODE_ENV}`);\n\n/* eslint-disable global-require, import/no-extraneous-dependencies */\nif (process.env.NODE_ENV !== 'production') {\n  const webpack = require('webpack');\n  const webpackDevMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n  const config = require('../webpack.config');\n  config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n  const bundler = webpack(config);\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n/* eslint-enable global-require, import/no-extraneous-dependencies */\n\napp.get('/api/issues', (req, res) => {\n  console.log(JSON.stringify(req.query, null, 2));\n  const filter = {};\n  if (req.query.status) filter.status = req.query.status;\n  if (req.query.effort_lte || req.query.effort_gte) filter.effort = {};\n  if (req.query.effort_lte) filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n  if (req.query.effort_gte) filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n  mongoDb.collection(COLLECTION)\n    .find(filter)\n    .toArray()\n    .then((issues) => {\n      const metadata = {\n        total_count: issues.length,\n      };\n      console.log('About to send API response');\n      res.json({\n        _metadata: metadata,\n        records: issues,\n      });\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.get('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n  }\n  mongoDb.collection(COLLECTION)\n    .find({ _id: issueId })\n    .limit(1)\n    .next()\n    .then((issue) => {\n      if (!issue) res.status(404).json({ message: `No such issue: ${issueId}` });\n      else res.json(issue);\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.put('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue id format: ${error}` });\n    return;\n  }\n\n  const issue = req.body;\n  delete issue._id;\n  const err = Issue.validateIssue(issue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request ${err}` });\n    return;\n  }\n\n  mongoDb.collection(COLLECTION)\n    .update({ _id: issueId }, Issue.convertIssue(issue))\n    .then(() => (\n      mongoDb.collection(COLLECTION)\n        .find({ _id: issueId })\n        .limit(1)\n        .next()\n    ))\n    .then((savedIssue) => {\n      res.json(savedIssue);\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error ${error}` });\n    });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n  mongoDb.collection(COLLECTION)\n    .insertOne(Issue.cleanupIssue(newIssue))\n    .then(result => mongoDb.collection(COLLECTION)\n      .find({ _id: result.insertedId })\n      .limit(1)\n      .next())\n    .then((issue) => {\n      res.json(issue);\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(500)\n        .json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.delete('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n\n  mongoDb.collection(COLLECTION).deleteOne({ _id: issueId }).then((deleteResult) => {\n    if (deleteResult.result.n === 1) res.json({ status: 'OK' });\n    else res.json({ status: 'Warmning: object not found' });\n  }).catch((error) => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('static/index.html'));\n});\n\nconst port = process.env.PORT || 8080;\n\nMongoClient.connect(MONGODB_URI, { useNewUrlParser: true })\n  .then((connection) => {\n    mongoConnection = connection;\n    mongoDb = mongoConnection.db(MONGODB_URI.replace(/.*\\//, ''));\n    app.listen(port, () => {\n      console.log('App started on port ', port);\n    });\n  })\n  .catch((err) => {\n    console.log('Error connecting to mongodb:', err);\n  });\n"]}