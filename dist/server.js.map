{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","MONGODB_URI","process","env","mongo_db","mongo_connection","use","express","static","bodyParser","json","err","req","res","next","console","log","send","set","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","get","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","Issue","validateIssue","insertOne","result","_id","insertedId","limit","port","PORT","MongoClient","connect","useNewUrlParser","connection","db","replace","listen"],"mappings":"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","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nimport 'babel-polyfill';\nimport express from 'express';\nconst app = express();\nimport {MongoClient} from 'mongodb';\nimport Issue from './issue';\n\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://localhost:27017/playground\";\nlet mongo_db, mongo_connection;\n\napp.use(express.static('static'));\n\nimport bodyParser from 'body-parser';\n\napp.use(bodyParser.json());\napp.use((err, req, res, next) => {\n    if (err) {\n        console.log('Invalid Request data')\n        res.send('Invalid Request data')\n    } else {\n        next()\n    }\n})\napp.use(express.static('static')); // serve the actual files\napp.set('json spaces', 4);\nconsole.log (`NODE_ENV is ${process.env.NODE_ENV}`);\nif (process.env.NODE_ENV !== 'production') {\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware');\n    const config = require('../webpack.config');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n    const bundler = webpack(config);\n    app.use(webpackDevMiddleware(bundler, {noInfo: true}));\n    app.use(webpackHotMiddleware(bundler, {log: console.log}));\n}\n\napp.get('/api/issues', (req, res) => {\n    mongo_db.collection('issues').find().toArray().then(issues => {\n        const metadata = {\n            total_count: issues.length\n        }\n        console.log('About to send API response');\n        res.json({\n            _metadata: metadata,\n            records: issues\n        })\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n\n});\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n    newIssue.created = new Date();\n    if (!newIssue.status) {\n        newIssue.status = 'New';\n    }\n    const err = Issue.validateIssue(newIssue);\n    if (err) {\n        res.status(422).json({ message: `Invalid request: ${err}` });\n        return;\n    }\n    mongo_db.collection('issues').insertOne(newIssue).then(result => {\n        // console.log(JSON.stringify(result, null, 2), result.insertedId);\n        return mongo_db.collection('issues').find({ _id: result.insertedId }).limit(1).next(); \n    }).then(newIssue => {\n        res.json(newIssue);\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n\n});\n\nvar port = process.env.PORT || 8080;\n\nMongoClient.connect(MONGODB_URI, { useNewUrlParser: true }).then(connection => {\n    mongo_connection = connection;\n    mongo_db = mongo_connection.db(MONGODB_URI.replace(/.*\\//, ''));\n    app.listen(port, function () {\n        console.log('App started on port ', port);\n    })\n}).catch(err => {\n    console.log(\"Error connecting to mongodb:\", err)\n})\n\n"]}