{"version":3,"sources":["../server/server.js"],"names":["app","SourceMapSupport","install","MONGODB_URI","process","env","mongoDb","mongoConnection","use","express","static","bodyParser","json","err","req","res","next","console","log","send","set","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","get","JSON","stringify","query","filter","status","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","message","post","newIssue","body","created","Date","Issue","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","issue","port","PORT","MongoClient","connect","useNewUrlParser","connection","db","replace","listen"],"mappings":"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","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\nimport 'babel-polyfill';\nimport express from 'express';\nimport { MongoClient } from 'mongodb';\nimport bodyParser from 'body-parser';\nimport Issue from './issue';\n\nconst app = express();\nSourceMapSupport.install();\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/playground';\nlet mongoDb;\nlet mongoConnection;\n\napp.use(express.static('static'));\n\napp.use(bodyParser.json());\napp.use((err, req, res, next) => {\n  if (err) {\n    console.log('Invalid Request data');\n    res.send('Invalid Request data');\n  } else {\n    next();\n  }\n});\napp.use(express.static('static')); // serve the actual files\napp.set('json spaces', 4);\nconsole.log(`NODE_ENV is ${process.env.NODE_ENV}`);\n\n/* eslint-disable global-require, import/no-extraneous-dependencies */\nif (process.env.NODE_ENV !== 'production') {\n  const webpack = require('webpack');\n  const webpackDevMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n  const config = require('../webpack.config');\n  config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n  const bundler = webpack(config);\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n/* eslint-enable global-require, import/no-extraneous-dependencies */\n\napp.get('/api/issues', (req, res) => {\n  console.log(JSON.stringify(req.query, null, 2));\n  const filter = {};\n  if (req.query.status) filter.status = req.query.status;\n  mongoDb.collection('issues')\n    .find(filter)\n    .toArray()\n    .then((issues) => {\n      const metadata = {\n        total_count: issues.length,\n      };\n      console.log('About to send API response');\n      res.json({\n        _metadata: metadata,\n        records: issues,\n      });\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n  mongoDb.collection('issues')\n    .insertOne(Issue.cleanupIssue(newIssue))\n    .then(result => mongoDb.collection('issues')\n      .find({ _id: result.insertedId })\n      .limit(1)\n      .next())\n    .then((issue) => {\n      res.json(issue);\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(500)\n        .json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\nconst port = process.env.PORT || 8080;\n\nMongoClient.connect(MONGODB_URI, { useNewUrlParser: true })\n  .then((connection) => {\n    mongoConnection = connection;\n    mongoDb = mongoConnection.db(MONGODB_URI.replace(/.*\\//, ''));\n    app.listen(port, () => {\n      console.log('App started on port ', port);\n    });\n  })\n  .catch((err) => {\n    console.log('Error connecting to mongodb:', err);\n  });\n"]}