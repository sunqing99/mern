{"version":3,"sources":["../server/issue.js"],"names":["validIssueStatus","New","Open","Assigned","Fixed","Verified","Closed","issueFieldType","status","owner","effort","created","completionDate","title","cleanupIssue","issue","cleanedUpIssue","Object","keys","forEach","field","validateIssue","errors","push","length","join","convertIssue","Date"],"mappings":";;;;;AAAA,MAAMA,mBAAmB;AACvBC,OAAK,IADkB;AAEvBC,QAAM,IAFiB;AAGvBC,YAAU,IAHa;AAIvBC,SAAO,IAJgB;AAKvBC,YAAU,IALa;AAMvBC,UAAQ;AANe,CAAzB;;AASA,MAAMC,iBAAiB;AACrBC,UAAQ,UADa;AAErBC,SAAO,UAFc;AAGrBC,UAAQ,UAHa;AAIrBC,WAAS,UAJY;AAKrBC,kBAAgB,UALK;AAMrBC,SAAO;AANc,CAAvB;;AASA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,iBAAiB,EAAvB;AACAC,SAAOC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA4BC,KAAD,IAAW;AACpC,QAAIb,eAAea,KAAf,CAAJ,EAA2BJ,eAAeI,KAAf,IAAwBL,MAAMK,KAAN,CAAxB;AAC5B,GAFD;AAGA,SAAOJ,cAAP;AACD;;AAED,SAASK,aAAT,CAAuBN,KAAvB,EAA8B;AAC5B,QAAMO,SAAS,EAAf;AACAL,SAAOC,IAAP,CAAYX,cAAZ,EAA4BY,OAA5B,CAAqCC,KAAD,IAAW;AAC7C,QAAIb,eAAea,KAAf,MAA0B,UAA1B,IAAwC,CAACL,MAAMK,KAAN,CAA7C,EAA2D;AACzDE,aAAOC,IAAP,CAAa,GAAEH,KAAM,eAArB;AACD;AACF,GAJD;AAKA,MAAI,CAACpB,iBAAiBe,MAAMP,MAAvB,CAAL,EAAqC;AACnCc,WAAOC,IAAP,CAAa,GAAER,MAAMP,MAAO,wBAA5B;AACD;AACD,SAAQc,OAAOE,MAAP,GAAgBF,OAAOG,IAAP,CAAY,GAAZ,CAAhB,GAAmC,IAA3C;AACD;;AAED,SAASC,YAAT,CAAsBX,KAAtB,EAA6B;AAC3B,MAAIA,MAAMJ,OAAV,EAAmBI,MAAMJ,OAAN,GAAgB,IAAIgB,IAAJ,CAASZ,MAAMJ,OAAf,CAAhB;AACnB,MAAII,MAAMH,cAAV,EAA0BG,MAAMH,cAAN,GAAuB,IAAIe,IAAJ,CAASZ,MAAMH,cAAf,CAAvB;AAC1B,SAAOE,aAAaC,KAAb,CAAP;AACD;;kBAEc;AACbM,eADa;AAEbP,cAFa;AAGbY;AAHa,C","file":"issue.js","sourcesContent":["const validIssueStatus = {\n  New: true,\n  Open: true,\n  Assigned: true,\n  Fixed: true,\n  Verified: true,\n  Closed: true,\n};\n\nconst issueFieldType = {\n  status: 'required',\n  owner: 'required',\n  effort: 'optional',\n  created: 'required',\n  completionDate: 'optional',\n  title: 'required',\n};\n\nfunction cleanupIssue(issue) {\n  const cleanedUpIssue = {};\n  Object.keys(issue).forEach((field) => {\n    if (issueFieldType[field]) cleanedUpIssue[field] = issue[field];\n  });\n  return cleanedUpIssue;\n}\n\nfunction validateIssue(issue) {\n  const errors = [];\n  Object.keys(issueFieldType).forEach((field) => {\n    if (issueFieldType[field] === 'required' && !issue[field]) {\n      errors.push(`${field} is required.`);\n    }\n  });\n  if (!validIssueStatus[issue.status]) {\n    errors.push(`${issue.status} is not a valid status`);\n  }\n  return (errors.length ? errors.join(';') : null);\n}\n\nfunction convertIssue(issue) {\n  if (issue.created) issue.created = new Date(issue.created);\n  if (issue.completionDate) issue.completionDate = new Date(issue.completionDate);\n  return cleanupIssue(issue);\n}\n\nexport default {\n  validateIssue,\n  cleanupIssue,\n  convertIssue,\n};\n"]}